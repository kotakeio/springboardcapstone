--- Start of E:\Springboard Projects\Capstone\springboardcapstone\personal-agent-front\eslint.config.js ---
import js from '@eslint/js'
import globals from 'globals'
import react from 'eslint-plugin-react'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'

export default [
  { ignores: ['dist'] },
  {
    files: ['**/*.{js,jsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    settings: { react: { version: '18.3' } },
    plugins: {
      react,
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...js.configs.recommended.rules,
      ...react.configs.recommended.rules,
      ...react.configs['jsx-runtime'].rules,
      ...reactHooks.configs.recommended.rules,
      'react/jsx-no-target-blank': 'off',
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
]

--- End of E:\Springboard Projects\Capstone\springboardcapstone\personal-agent-front\eslint.config.js ---

--- Start of E:\Springboard Projects\Capstone\springboardcapstone\personal-agent-front\src\App.css ---
#root {
  max-width: 1280px;
  /* margin: 0 auto;  <-- no longer needed for horizontal centering 
                          since the body already centers #root. */
  padding: 2rem;
  text-align: center; /* keeps text itself centered */
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}

--- End of E:\Springboard Projects\Capstone\springboardcapstone\personal-agent-front\src\App.css ---

--- Start of E:\Springboard Projects\Capstone\springboardcapstone\personal-agent-front\src\App.jsx ---
// src/App.jsx
import React, { useState, useEffect } from "react";
import { Routes, Route, Navigate } from "react-router-dom";
import { useUser } from "./UserContext";
import axiosInstance from "./axiosInstance";

import LoginPage from "./Login/LoginPage";
import RegisterPage from "./Login/RegisterPage";
import Schedule from "./Schedule/Schedule";
import PrivateRoute from "./PrivateRoute";

function App() {
  const { setUser } = useUser();
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [isAuthChecked, setIsAuthChecked] = useState(false);

  // Check session on mount.
  useEffect(() => {
    async function checkSession() {
      try {
        const { data } = await axiosInstance.get("/api/users/me");
        if (data.success && data.user) {
          setUser(data.user);
          setIsAuthenticated(true);
        } else {
          setUser(null);
          setIsAuthenticated(false);
        }
      } catch (err) {
        setUser(null);
        setIsAuthenticated(false);
      } finally {
        setIsAuthChecked(true);
      }
    }
    checkSession();
  }, [setUser]);

  if (!isAuthChecked) {
    return <div>Loading...</div>;
  }

  return (
    <Routes>
      {/* Public Routes */}
      <Route path="/login" element={<LoginPage />} />
      <Route path="/register" element={<RegisterPage />} />

      {/* Protected Route */}
      <Route
        path="/schedule"
        element={
          <PrivateRoute isAuthenticated={isAuthenticated}>
            <Schedule />
          </PrivateRoute>
        }
      />

      {/* Default redirection: if logged in go to schedule; otherwise, to login */}
      <Route path="*" element={<Navigate to={isAuthenticated ? "/schedule" : "/login"} />} />
    </Routes>
  );
}

export default App;

--- End of E:\Springboard Projects\Capstone\springboardcapstone\personal-agent-front\src\App.jsx ---

--- Start of E:\Springboard Projects\Capstone\springboardcapstone\personal-agent-front\src\axiosInstance.js ---
// axiosInstance.js
import axios from "axios";

const API_URL = import.meta.env.VITE_API_URL || "http://localhost:5000";

// Create an Axios instance with a base URL
const axiosInstance = axios.create({
  baseURL: API_URL,
});

// Add a request interceptor to include the JWT token in the Authorization header
axiosInstance.interceptors.request.use(
  (config) => {
    // Retrieve the token from localStorage
    const token = localStorage.getItem("token");
    if (token) {
      // Set the Authorization header using the Bearer scheme
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

export default axiosInstance;

--- End of E:\Springboard Projects\Capstone\springboardcapstone\personal-agent-front\src\axiosInstance.js ---

--- Start of E:\Springboard Projects\Capstone\springboardcapstone\personal-agent-front\src\home.jsx ---
// src/Home.jsx
import React from "react";
import { useNavigate } from "react-router-dom"; // import useNavigate from react-router-dom

function Home() {
  const navigate = useNavigate();

  // This function now navigates to "/schedule"
  const handleSchedule = () => {
    navigate("/schedule");
  };

  return (
    <div style={{ margin: 20 }}>
      <h2>AI Agents</h2>
      <button onClick={handleSchedule}>Go to Schedule</button>
    </div>
  );
}

export default Home;

--- End of E:\Springboard Projects\Capstone\springboardcapstone\personal-agent-front\src\home.jsx ---

--- Start of E:\Springboard Projects\Capstone\springboardcapstone\personal-agent-front\src\index.css ---
:root {
  font-family: Inter, system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;

  color-scheme: light dark;
  color: rgba(255, 255, 255, 0.87);
  background-color: #242424;

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

a {
  font-weight: 500;
  color: #646cff;
  text-decoration: inherit;
}
a:hover {
  color: #535bf2;
}

/* 
  1) Use flexbox on body to center everything:
  2) Align and justify in the center,
     ensuring the entire page is centered horizontally & vertically.
*/
body {
  margin: 0;
  display: flex;
  flex-direction: column; /* If you want items stacked */
  align-items: center; /* Center horizontally */
  justify-content: flex-start;
  min-width: 320px;
  min-height: 100vh;
  padding-top: 60px;
}

#root {
  width: 100%;
  max-width: 500px;
  margin: 0 auto; /* center horizontally if bigger than 600px */
  padding: 1rem;  /* optional extra spacing around content */
  box-sizing: border-box;
}

h1 {
  font-size: 3.2em;
  line-height: 1.1;
}

button {
  border-radius: 8px;
  border: 1px solid transparent;
  padding: 0.6em 1.2em;
  font-size: 1em;
  font-weight: 500;
  font-family: inherit;
  background-color: #1a1a1a;
  cursor: pointer;
  transition: border-color 0.25s;
}
button:hover {
  border-color: #646cff;
}
button:focus,
button:focus-visible {
  outline: 4px auto -webkit-focus-ring-color;
}

@media (prefers-color-scheme: light) {
  :root {
    color: #213547;
    background-color: #ffffff;
  }
  a:hover {
    color: #747bff;
  }
  button {
    background-color: #f9f9f9;
  }
}
/* Disable page scroll */
html, body {
  margin-top: 2rem;
  padding: 0;
  overflow: hidden; /* no scrollbars for the entire page */
  height: 100vh;    /* letâ€™s have it fill the viewport */
}

--- End of E:\Springboard Projects\Capstone\springboardcapstone\personal-agent-front\src\index.css ---

--- Start of E:\Springboard Projects\Capstone\springboardcapstone\personal-agent-front\src\Login\allTimezones.js ---
// src/Login/allTimezones.js
export const timezoneOptions = [
    { value: "Africa/Abidjan", label: "Africa/Abidjan" },
    { value: "Africa/Accra", label: "Africa/Accra" },
    { value: "Africa/Addis_Ababa", label: "Africa/Addis_Ababa" },
    // ...
    { value: "America/New_York", label: "America/New_York" },
    { value: "Europe/London", label: "Europe/London" },
    // ...
    { value: "Pacific/Wallis", label: "Pacific/Wallis" },
    { value: "UTC", label: "UTC" },
  ];
  
--- End of E:\Springboard Projects\Capstone\springboardcapstone\personal-agent-front\src\Login\allTimezones.js ---

--- Start of E:\Springboard Projects\Capstone\springboardcapstone\personal-agent-front\src\Login\LoginPage.jsx ---
// src/Login/LoginPage.jsx
import React, { useState } from "react";
import { useNavigate, Link } from "react-router-dom";
import { useUser } from "../UserContext";
import axiosInstance from "../axiosInstance";

const validateEmail = (email) => {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return emailRegex.test(email);
};

const validatePassword = (password) => password.length >= 8;

function LoginPage() {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [errors, setErrors] = useState({ email: "", password: "" });
  const [message, setMessage] = useState("");
  const { setUser } = useUser();
  const navigate = useNavigate();

  const handleEmailChange = (e) => {
    const value = e.target.value;
    setEmail(value);
    setErrors((prev) => ({ ...prev, email: validateEmail(value) ? "" : "Invalid email." }));
  };

  const handlePasswordChange = (e) => {
    const value = e.target.value;
    setPassword(value);
    setErrors((prev) => ({ ...prev, password: validatePassword(value) ? "" : "Password must be at least 8 characters." }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!email || !password) {
      setMessage("All fields are required.");
      return;
    }
    try {
      const { data } = await axiosInstance.post("/api/users/login", { username: email, password });
      if (data.success) {
        localStorage.setItem("token", data.token);
        setUser(data.user);
        navigate("/schedule");
      } else {
        setMessage(data.message || "Login failed.");
      }
    } catch (error) {
      console.error("Error logging in:", error);
      setMessage("An error occurred during login.");
    }
  };

  return (
    <div style={{ marginTop: "100px", display: "flex", justifyContent: "center" }}>
      <form onSubmit={handleSubmit} noValidate style={{ border: "2px solid #888", padding: "1rem", borderRadius: "6px", backgroundColor: "#333", color: "#fff", minWidth: "300px" }}>
        <h2>Login</h2>
        {message && <p style={{ color: "red" }}>{message}</p>}
        <div style={{ marginBottom: "1rem" }}>
          <label htmlFor="email">Email:</label>
          <input type="email" id="email" value={email} onChange={handleEmailChange} required style={{ display: "block", width: "100%", padding: "0.5rem", boxSizing: "border-box" }} />
          {errors.email && <span style={{ color: "red", fontSize: "0.9rem" }}>{errors.email}</span>}
        </div>
        <div style={{ marginBottom: "1rem" }}>
          <label htmlFor="password">Password:</label>
          <input type="password" id="password" value={password} onChange={handlePasswordChange} required style={{ display: "block", width: "100%", padding: "0.5rem", boxSizing: "border-box" }} />
          {errors.password && <span style={{ color: "red", fontSize: "0.9rem" }}>{errors.password}</span>}
        </div>
        <button type="submit" style={{ padding: "0.5rem 1rem" }}>Login</button>
        <div style={{ marginTop: "1rem" }}>
          <p style={{ margin: 0 }}>
            Don't have an account? <Link to="/register" style={{ color: "#00e1ff" }}>Register here</Link>
          </p>
        </div>
      </form>
    </div>
  );
}

export default LoginPage;

--- End of E:\Springboard Projects\Capstone\springboardcapstone\personal-agent-front\src\Login\LoginPage.jsx ---

--- Start of E:\Springboard Projects\Capstone\springboardcapstone\personal-agent-front\src\Login\RegisterPage.jsx ---
// src/Login/RegisterPage.jsx
import React, { useState } from "react";
import { Link, useNavigate } from "react-router-dom";
import { useUser } from "../UserContext";
import axiosInstance from "../axiosInstance";

const validateEmail = (email) => {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return emailRegex.test(email);
};

const validatePassword = (password) => password.length >= 8;

function RegisterPage() {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const [errors, setErrors] = useState({ email: "", password: "", confirmPassword: "" });
  const [message, setMessage] = useState("");
  const { setUser } = useUser();
  const navigate = useNavigate();

  const handleEmailChange = (e) => {
    const value = e.target.value;
    setEmail(value);
    setErrors((prev) => ({ ...prev, email: validateEmail(value) ? "" : "Invalid email." }));
  };

  const handlePasswordChange = (e) => {
    const value = e.target.value;
    setPassword(value);
    setErrors((prev) => ({ ...prev, password: validatePassword(value) ? "" : "Password must be at least 8 characters." }));
    if (confirmPassword && value !== confirmPassword) {
      setErrors((prev) => ({ ...prev, confirmPassword: "Passwords do not match." }));
    } else if (confirmPassword) {
      setErrors((prev) => ({ ...prev, confirmPassword: "" }));
    }
  };

  const handleConfirmPasswordChange = (e) => {
    const value = e.target.value;
    setConfirmPassword(value);
    setErrors((prev) => ({ ...prev, confirmPassword: password !== value ? "Passwords do not match." : "" }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!email || !password || !confirmPassword) {
      setMessage("All fields are required.");
      return;
    }
    if (password !== confirmPassword) {
      setMessage("Passwords do not match.");
      return;
    }
    try {
      const { data } = await axiosInstance.post("/api/users/register", { username: email, password });
      if (data.success) {
        localStorage.setItem("token", data.token);
        setUser(data.user);
        navigate("/schedule");
      } else {
        setMessage(`Error: ${data.message}`);
      }
    } catch (error) {
      console.error("Error registering user:", error);
      setMessage("An error occurred during registration.");
    }
  };

  return (
    <div style={{ marginTop: "100px", display: "flex", justifyContent: "center" }}>
      <form onSubmit={handleSubmit} noValidate style={{ border: "2px solid #888", padding: "1rem", borderRadius: "6px", backgroundColor: "#333", color: "#fff", minWidth: "300px" }}>
        <h2>Create an Account</h2>
        {message && <p style={{ color: "red" }}>{message}</p>}
        <div style={{ marginBottom: "1rem" }}>
          <label htmlFor="email">Email:</label>
          <input type="email" id="email" value={email} onChange={handleEmailChange} required style={{ display: "block", width: "100%", padding: "0.5rem", boxSizing: "border-box" }} />
          {errors.email && <span style={{ color: "red", fontSize: "0.9rem" }}>{errors.email}</span>}
        </div>
        <div style={{ marginBottom: "1rem" }}>
          <label htmlFor="password">Password:</label>
          <input type="password" id="password" value={password} onChange={handlePasswordChange} required style={{ display: "block", width: "100%", padding: "0.5rem", boxSizing: "border-box" }} />
          {errors.password && <span style={{ color: "red", fontSize: "0.9rem" }}>{errors.password}</span>}
        </div>
        <div style={{ marginBottom: "1rem" }}>
          <label htmlFor="confirmPassword">Confirm Password:</label>
          <input type="password" id="confirmPassword" value={confirmPassword} onChange={handleConfirmPasswordChange} required style={{ display: "block", width: "100%", padding: "0.5rem", boxSizing: "border-box" }} />
          {errors.confirmPassword && <span style={{ color: "red", fontSize: "0.9rem" }}>{errors.confirmPassword}</span>}
        </div>
        <button type="submit" style={{ padding: "0.5rem 1rem" }}>Register</button>
        <div style={{ marginTop: "1rem" }}>
          <p style={{ margin: 0 }}>
            Already have an account? <Link to="/login" style={{ color: "#00e1ff" }}>Log in here</Link>
          </p>
        </div>
      </form>
    </div>
  );
}

export default RegisterPage;

--- End of E:\Springboard Projects\Capstone\springboardcapstone\personal-agent-front\src\Login\RegisterPage.jsx ---

--- Start of E:\Springboard Projects\Capstone\springboardcapstone\personal-agent-front\src\main.jsx ---
// ai-agents-frontend/src/main.jsx
import React from 'react'
import { createRoot } from 'react-dom/client'
import { BrowserRouter } from 'react-router-dom'
import './index.css'
import App from './App.jsx'
import { UserProvider } from './UserContext'  // <-- Make sure the path is correct

createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <UserProvider>
      <BrowserRouter>
        <App />
      </BrowserRouter>
    </UserProvider>
  </React.StrictMode>
)

--- End of E:\Springboard Projects\Capstone\springboardcapstone\personal-agent-front\src\main.jsx ---

--- Start of E:\Springboard Projects\Capstone\springboardcapstone\personal-agent-front\src\PrivateRoute.jsx ---
// src/PrivateRoute.jsx
import React from "react";
import { Navigate } from "react-router-dom";

function PrivateRoute({ isAuthenticated, children }) {
  if (!isAuthenticated) {
    console.log("PrivateRoute => Not Authenticated => redirecting to /login");
    return <Navigate to="/login" />;
  }
  console.log("PrivateRoute => Authenticated => returning children");
  return children;
}

export default PrivateRoute;

--- End of E:\Springboard Projects\Capstone\springboardcapstone\personal-agent-front\src\PrivateRoute.jsx ---

--- Start of E:\Springboard Projects\Capstone\springboardcapstone\personal-agent-front\src\RequireOnboarding.jsx ---
// src/RequireOnboarding.jsx
import React from "react";
import { Navigate } from "react-router-dom";
import { useUser } from "./UserContext";

export function RequireOnboarding({ children }) {
  const { user } = useUser();

  if (user && !user.onboardingCompleted) {
    console.log("RequireOnboarding => not onboarded => redirect to /calendar-onboarding");
    return <Navigate to="/calendar-onboarding" />;
  }

  console.log("RequireOnboarding => onboarded => returning children");
  return children;
}

--- End of E:\Springboard Projects\Capstone\springboardcapstone\personal-agent-front\src\RequireOnboarding.jsx ---

--- Start of E:\Springboard Projects\Capstone\springboardcapstone\personal-agent-front\src\Schedule\BlockEditor.jsx ---
// src\Schedule\BlockEditor.jsx

import React, { useState, useEffect } from "react";
import dayjs from "dayjs";

// We'll use your existing API helpers or define new ones
import { updateTimeBlock, callPhoneAlarm, callTaskMagic } from "./scheduleAPI";

function BlockEditor({ block, onClose, onSaved }) {
  // block is { id, startTime, endTime, ... }

  // local state for start/end
  const [start, setStart] = useState("");
  const [end, setEnd] = useState("");
  const [error, setError] = useState("");

  useEffect(() => {
    if (block) {
      // format ISO -> "HH:mm" for input type="time"
      const startStr = dayjs(block.startTime).format("HH:mm");
      const endStr   = dayjs(block.endTime).format("HH:mm");
      setStart(startStr);
      setEnd(endStr);
    }
  }, [block]);

  console.log("BlockEditor is rendered with block:", block);
  if (!block) return null; // no block => no popup

  async function handleSave() {
    // e.g. convert "HH:mm" => dayjs => ISO
    const date = dayjs(block.startTime).format("YYYY-MM-DD"); // keep same date
    const newStartISO = dayjs(`${date}T${start}`).toISOString();
    const newEndISO   = dayjs(`${date}T${end}`).toISOString();
    
    try {
      const resp = await updateTimeBlock(block._id, newStartISO, newEndISO);
      if (!resp.success) {
        setError(resp.message);
      } else {
        onSaved(); // refetch or update parent state
        onClose(); // close the modal
      }
    } catch (err) {
      console.error(err);
      setError(err.message);
    }
  }

  // set phone alarm => calls your new route
  async function handleSetPhoneAlarm() {
    try {
      const resp = await callPhoneAlarm(block._id);
      if (!resp.success) {
        alert("Phone Alarm error: " + resp.message);
      } else {
        alert("Phone Alarm set successfully!");
      }
    } catch (err) {
      console.error(err);
      alert("Network error setting phone alarm");
    }
  }

  // set freedom block => calls your new taskMagic route
  async function handleSetFreedomBlock() {
    try {
      const resp = await callTaskMagic(block._id);
      if (!resp.success) {
        alert("TaskMagic error: " + resp.message);
      } else {
        alert("TaskMagic webhook called!");
      }
    } catch (err) {
      console.error(err);
      alert("Network error calling TaskMagic");
    }
  }

  return (
    <div style={styles.overlay}>
      <div style={styles.modal}>
        <h3>Edit Time Block</h3>
        {error && <div style={{ color: "red" }}>{error}</div>}

        {/* Start/End time fields */}
        <div>
          <label>Start Time: </label>
          <input
            type="time"
            value={start}
            onChange={(e) => setStart(e.target.value)}
          />
        </div>
        <div style={{ marginTop: 10 }}>
          <label>End Time: </label>
          <input
            type="time"
            value={end}
            onChange={(e) => setEnd(e.target.value)}
          />
        </div>

        <div style={{ marginTop: 10 }}>
          {/* The two manual buttons */}
          <button onClick={handleSetPhoneAlarm}>Set Phone Alarm</button>
          <button onClick={handleSetFreedomBlock}>Set Freedom Block</button>
        </div>

        <div style={{ marginTop: 10 }}>
          <button onClick={handleSave}>Save</button>
          <button onClick={onClose} style={{ marginLeft: 10 }}>
            Cancel
          </button>
        </div>
      </div>
    </div>
  );
}

// simple inline styles
const styles = {
  overlay: {
    position: "fixed",
    top: 0, left: 0, right: 0, bottom: 0,
    backgroundColor: "rgba(0,0,0,0.5)",
    display: "flex",
    justifyContent: "center",
    alignItems: "center",
    zIndex: 9999,
  },
  modal: {
    backgroundColor: "#242424",
    padding: "3rem",
    borderRadius: "8px",
    minWidth: "300px",
  },
};

export default BlockEditor;

--- End of E:\Springboard Projects\Capstone\springboardcapstone\personal-agent-front\src\Schedule\BlockEditor.jsx ---

--- Start of E:\Springboard Projects\Capstone\springboardcapstone\personal-agent-front\src\Schedule\eventStyle.js ---
// src/Schedule/eventStyle.js
import dayjs from "dayjs";
import utc from "dayjs/plugin/utc";
import timezone from "dayjs/plugin/timezone";
import {
  dayStart,
  START_HOUR,
  END_HOUR,
  MINUTES_PER_SLOT,
  ROW_HEIGHT_PX,
} from "./scheduleConstants.js";


dayjs.extend(utc);
dayjs.extend(timezone);

/**
 * Given an event's start/end times (ISO strings) and whether it's approved,
 * return a style object for absolute positioning within the day column.
 */
export function getEventStyle(startISO, endISO, isBlockApproved = false) {
  // Explicitly parse the ISO strings as UTC, then convert to America/Denver
  const start = dayjs.utc(startISO).tz("America/Denver");
  const end = dayjs.utc(endISO).tz("America/Denver");

  // If the event starts before our day reference, clamp it
  const effectiveStart = start.isBefore(dayStart) ? dayStart : start;

  // minutes from dayStart
  const minutesFromDayStart = effectiveStart.diff(dayStart, "minute");
  // total duration in minutes
  const duration = end.diff(start, "minute");

  // Convert to px
  const top = (minutesFromDayStart / MINUTES_PER_SLOT) * ROW_HEIGHT_PX;
  const height = (duration / MINUTES_PER_SLOT) * ROW_HEIGHT_PX;
  const safeHeight = Math.max(height, 10); // minimum 10px tall

  // Use different styling for approved vs. unapproved events
  const bgColor = isBlockApproved
    ? "rgba(0, 200, 255, 0.7)"
    : "rgba(0, 200, 255, 0.2)";
  const borderStyle = isBlockApproved ? "none" : "2px solid cyan";

  return {
    position: "absolute",
    top: `${top}px`,
    left: "100px",
    width: "200px",
    height: `${safeHeight}px`,
    backgroundColor: bgColor,
    border: borderStyle,
    borderRadius: "4px",
    overflow: "hidden",
    padding: "2px 6px",
    boxSizing: "border-box",
  };
}
--- End of E:\Springboard Projects\Capstone\springboardcapstone\personal-agent-front\src\Schedule\eventStyle.js ---

--- Start of E:\Springboard Projects\Capstone\springboardcapstone\personal-agent-front\src\Schedule\Schedule.css ---
/* src/Schedule/Schedule.css */

/* Container around the entire schedule page */
.schedule-container {
  display: flex;
  flex-direction: column;
  height: calc(100vh - 60px);
  overflow: hidden;
  box-sizing: border-box;
}

/* Title margins, etc. remain as you like */
.schedule-container h2 {
  margin-bottom: 1rem;
}
  
  /* The "day column" container for appointments/blocks */
  .day-column-outer {
    flex: 1;             /* takes the remaining vertical space */
    overflow-y: auto;    /* vertical scrolling here */
    overflow-x: hidden;  /* no horizontal scroll */
    position: relative;  /* you can keep it relative if needed for stacking */
    max-width: 400px;    /* limit horizontal width if desired */
    padding: 1rem;
  }
  
  .day-column-divider {
    width: 100%;         /* fill the entire .day-column-outer */
    border: none;        /* remove default styling */
    border-top: 2px solid #ccc; /* your custom line */
    margin: 1rem;
  }

  .day-column-inner {
    position: relative;
    width: 100%; /* or 400px if you want a fixed width */
  }
  
  /* A dashed horizontal line for each 15-min timeslot */
  .schedule-grid-line {
    position: absolute;
    left: 0;
    width: 100%;
    height: 0; /* line is drawn with border-top */
    border-top: 1px dashed #444;
  }
  
  /* The time label for each grid line (e.g. "5:00 AM") */
  .schedule-grid-line-label {
    position: absolute;
    left: 0;
    transform: translateY(-0.6rem);
    font-size: 0.8rem;
    color: #ccc;
  }
  
--- End of E:\Springboard Projects\Capstone\springboardcapstone\personal-agent-front\src\Schedule\Schedule.css ---

--- Start of E:\Springboard Projects\Capstone\springboardcapstone\personal-agent-front\src\Schedule\Schedule.jsx ---
// src/Schedule/Schedule.jsx
import React, { useState, useEffect } from "react";
import dayjs from "dayjs";
import { fetchTodaySchedule } from "./scheduleAPI.js";
import { getEventStyle } from "./eventStyle.js"; // for appointments
import {
  dayStart,
  START_HOUR,
  END_HOUR,
  MINUTES_PER_SLOT,
  ROW_HEIGHT_PX,
} from "./scheduleConstants.js";
import "./Schedule.css";
import TimeBlock from "./TimeBlock.jsx";
import BlockEditor from "./BlockEditor";
import axiosInstance from "../axiosInstance";

function Schedule() {
  const [appointments, setAppointments] = useState([]);
  const [timeBlocks, setTimeBlocks] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");
  const [editBlock, setEditBlock] = useState(null);

  function handleEditBlock(block) {
    setEditBlock(block);
  }

  // Function to "refetch" schedule data after updates
  async function loadData() {
    try {
      setLoading(true);
      setError("");
      const data = await fetchTodaySchedule();
      console.log("Schedule data from backend:", data); // <-- Add this
      if (data.success) {
        setAppointments(data.appointments || []);
        setTimeBlocks(data.timeBlocks || []);
      } else {
        setError(data.message || "Failed to load schedule.");
      }
    } catch (err) {
      console.error("Error loading schedule:", err);
      setError(err.message);
    } finally {
      setLoading(false);
    }
  }

  useEffect(() => {
    console.log("Schedule component mounted. Loading data...");
    loadData();
  }, []);

  if (loading) return <div>Loading schedule...</div>;
  if (error) return <div style={{ color: "red" }}>Error: {error}</div>;

  // Build the day column grid lines...
  const totalMinutes = (END_HOUR - START_HOUR) * 60;
  const totalSlots = totalMinutes / MINUTES_PER_SLOT;
  const containerHeight = totalSlots * ROW_HEIGHT_PX;

  const gridLines = [];
  let current = dayStart;
  for (let i = 0; i <= totalSlots; i++) {
    const label = current.format("h:mm A");
    gridLines.push({ top: i * ROW_HEIGHT_PX, label });
    current = current.add(MINUTES_PER_SLOT, "minute");
  }

  // Approve button: calls the /approveAll route using Axios
  async function handleApproveAll() {
    try {
      const { data } = await axiosInstance.post("/api/freedom-blocks/approveAll");
      if (!data.success) {
        alert("Error approving blocks: " + data.message);
      } else {
        // triggers phone alarms or TaskMagic on server side, then refetch
        loadData();
      }
    } catch (err) {
      alert("Network error approving blocks");
      console.error(err);
    }
  }
  console.log("Schedule: top-level log");

  return (
    <div className="schedule-container">
      <h2>Today's Schedule</h2>

      {/* Approve button (only if we have unapproved blocks) */}
      {timeBlocks.some((b) => !b.approved) && (
        <button onClick={handleApproveAll}>Approve All Blocks</button>
      )}

      <hr className="day-column-divider" />

      {/* Day column */}
      <div className="day-column-outer">
        {/* Inner wrapper sized to "containerHeight" */}
        <div className="day-column-inner" style={{ height: containerHeight }}>
          {/* Grid lines */}
          {gridLines.map((line, idx) => (
            <div key={idx} className="schedule-grid-line" style={{ top: line.top }}>
              <span className="schedule-grid-line-label">{line.label}</span>
            </div>
          ))}

          {/* Appointments (visual only, not draggable) */}
          {appointments.map((appt, idx) => {
            const style = getEventStyle(appt.start?.dateTime, appt.end?.dateTime, true);
            return (
              <div
                key={idx}
                style={{
                  ...style,
                  backgroundColor: "rgba(255, 150, 150, 0.7)",
                  border: "1px solid rgba(255,100,100,0.7)",
                }}
              >
                <strong>{appt.summary || "Appointment"}</strong>
              </div>
            );
          })}

          {/* Draggable Time Blocks */}
          {timeBlocks.map((block) => (
            <TimeBlock
              key={block._id}
              block={block}
              onUpdate={loadData}
              onEdit={handleEditBlock}
            />
          ))}
        </div>

        {editBlock && (
          <BlockEditor
            block={editBlock}
            onClose={() => setEditBlock(null)}
            onSaved={loadData}
          />
        )}
      </div>
    </div>
  );
}

export default Schedule;

--- End of E:\Springboard Projects\Capstone\springboardcapstone\personal-agent-front\src\Schedule\Schedule.jsx ---

--- Start of E:\Springboard Projects\Capstone\springboardcapstone\personal-agent-front\src\Schedule\scheduleAPI.js ---
// src/Schedule/scheduleAPI.js
import axiosInstance from "../axiosInstance";

/**
 * Fetch today's appointments and timeBlocks from the backend.
 */
export async function fetchTodaySchedule() {
  try {
    const { data } = await axiosInstance.get("/api/freedom-blocks/today");
    return data;
  } catch (error) {
    throw new Error(`HTTP error: ${error.response?.status || error.message}`);
  }
}

export async function updateTimeBlock(id, startTime, endTime) {
  const { data } = await axiosInstance.put(`/api/freedom-blocks/${id}`, {
    startTime,
    endTime,
  });
  return data;
}

export async function deleteTimeBlock(id) {
  const { data } = await axiosInstance.delete(`/api/freedom-blocks/${id}`);
  return data;
}

export async function callPhoneAlarm(blockId) {
  const { data } = await axiosInstance.post(
    `/api/freedom-blocks/${blockId}/phoneAlarm`
  );
  return data;
}

export async function callTaskMagic(blockId) {
  const { data } = await axiosInstance.post(
    `/api/freedom-blocks/${blockId}/taskMagic`
  );
  return data;
}

--- End of E:\Springboard Projects\Capstone\springboardcapstone\personal-agent-front\src\Schedule\scheduleAPI.js ---

--- Start of E:\Springboard Projects\Capstone\springboardcapstone\personal-agent-front\src\Schedule\scheduleConstants.js ---
// src/Schedule/scheduleConstants.js
import dayjs from "dayjs";

// You can adjust these as needed
export const START_HOUR = 5;        // 5:00 AM
export const END_HOUR = 22;         // 10:00 PM
export const MINUTES_PER_SLOT = 15;
export const ROW_HEIGHT_PX = 30;

// "dayStart" is the reference moment for the top of the schedule
export const dayStart = dayjs()
  .hour(START_HOUR)
  .minute(0)
  .second(0)
  .millisecond(0);

--- End of E:\Springboard Projects\Capstone\springboardcapstone\personal-agent-front\src\Schedule\scheduleConstants.js ---

--- Start of E:\Springboard Projects\Capstone\springboardcapstone\personal-agent-front\src\Schedule\TimeBlock.jsx ---
import React, { useState } from "react";
import { Rnd } from "react-rnd";
import dayjs from "dayjs";
import utc from "dayjs/plugin/utc";
import timezone from "dayjs/plugin/timezone";
import { updateTimeBlock, deleteTimeBlock } from "./scheduleAPI";
import {
  dayStart,
  MINUTES_PER_SLOT,
  ROW_HEIGHT_PX,
} from "./scheduleConstants.js";

dayjs.extend(utc);
dayjs.extend(timezone);
/**
 * Rounds raw minutes to the nearest 5-min boundary.
 * E.g. 12 => 10, 13 => 15, etc.
 */
function snapTo5MinOffset(rawMinutes) {
  return Math.round(rawMinutes / 5) * 5;
}

function TimeBlock({ block, onUpdate, onEdit }) {
  // 1) Convert the block's start/end to dayjs
  const start = dayjs.utc(block.startTime).tz("America/Denver");
  const end = dayjs.utc(block.endTime).tz("America/Denver");

  // 2) Calculate initial position & size in px
  const effectiveStart = start.isBefore(dayStart) ? dayStart : start;
  const minutesFromDayStart = effectiveStart.diff(dayStart, "minute");
  const durationMinutes     = end.diff(start, "minute");

  const topPx = (minutesFromDayStart / MINUTES_PER_SLOT) * ROW_HEIGHT_PX;
  const heightPx = Math.max(
    (durationMinutes / MINUTES_PER_SLOT) * ROW_HEIGHT_PX,
    10
  );

  // 3) Local state for RND
  const [position, setPosition] = useState({ x: 100, y: topPx });
  const [size, setSize]         = useState({ width: 200, height: heightPx });
  const [hoverTime, setHoverTime] = useState("");

  // 4) Style based on approved vs. unapproved
  const bgColor = block.approved
    ? "rgba(0, 200, 255, 0.7)"
    : "rgba(0, 200, 255, 0.2)";
  const border  = block.approved ? "none" : "2px solid cyan";

  // We'll display the block's times in "h:mm A - h:mm A" format
  const blockLabel = `${start.format("h:mm A")} - ${end.format("h:mm A")}`;

  /**
   * Helper to convert y-position in px â†’ a dayjs at nearest 5-min
   */
  function getSnappedStartTime(yPx) {
    const rawMinutes = (yPx / ROW_HEIGHT_PX) * MINUTES_PER_SLOT;
    const snapped    = snapTo5MinOffset(rawMinutes);
    return dayStart.add(snapped, "minute");
  }

  // ------------------ DRAG ------------------
  function handleDrag(e, d) {
    // As user drags, show a hover label with the new times
    const newStart    = getSnappedStartTime(d.y);
    const oldDuration = end.diff(start, "minute");
    const newEnd      = newStart.add(oldDuration, "minute");
    setHoverTime(`${newStart.format("h:mm A")} - ${newEnd.format("h:mm A")}`);
  }

  async function handleDragStop(e, d) {
    const newStart    = getSnappedStartTime(d.y);
    const oldDuration = end.diff(start, "minute");
    const newEnd      = newStart.add(oldDuration, "minute");

    try {
      // Update in DB
      const resp = await updateTimeBlock(
        block._id,
        newStart.toISOString(),
        newEnd.toISOString()
      );
      if (!resp.success) {
        alert("Error: " + resp.message);
        // revert position
        setPosition({ x: 100, y: topPx });
      } else {
        // Successfully updated, refetch or update parent
        onUpdate();
      }
    } catch (err) {
      console.error(err);
      setPosition({ x: 100, y: topPx });
    }
    setHoverTime("");
  }

  // ------------------ RESIZE ------------------
  function handleResize(e, direction, ref, delta, pos) {
    // As user resizes from bottom, show a hover label with the new times
    const newHeightPx  = parseFloat(ref.style.height);
    const newStart     = getSnappedStartTime(pos.y);
    const newDuration  = (newHeightPx / ROW_HEIGHT_PX) * MINUTES_PER_SLOT;
    const snappedDur   = snapTo5MinOffset(newDuration);
    const newEnd       = newStart.add(snappedDur, "minute");
    setHoverTime(`${newStart.format("h:mm A")} - ${newEnd.format("h:mm A")}`);
  }

  async function handleResizeStop(e, direction, ref, delta, pos) {
    const newHeightPx  = parseFloat(ref.style.height);
    const newStart     = getSnappedStartTime(pos.y);
    const newDuration  = (newHeightPx / ROW_HEIGHT_PX) * MINUTES_PER_SLOT;
    const snappedDur   = snapTo5MinOffset(newDuration);
    const newEnd       = newStart.add(snappedDur, "minute");

    try {
      const resp = await updateTimeBlock(
        block._id,
        newStart.toISOString(),
        newEnd.toISOString()
      );
      if (!resp.success) {
        alert("Error: " + resp.message);
        // revert
        setPosition({ x: 100, y: topPx });
        setSize({ width: 200, height: heightPx });
      } else {
        onUpdate();
      }
    } catch (err) {
      console.error(err);
      setPosition({ x: 100, y: topPx });
      setSize({ width: 200, height: heightPx });
    }
    setHoverTime("");
  }

  // ------------------ DELETE ------------------
  async function handleDelete(e) {
    // Make sure we don't accidentally drag
    e.stopPropagation();
    if (!window.confirm("Delete this block?")) return;
    try {
      const resp = await deleteTimeBlock(block._id);
      if (!resp.success) {
        alert("Error deleting block: " + resp.message);
      } else {
        onUpdate();
      }
    } catch (err) {
      console.error(err);
      alert("Network error deleting block");
    }
  }

  // ------------------ RENDER ------------------
  return (
    <>
      <Rnd
        // 1) We'll specify a handle className:
        dragHandleClassName="drag-handle"
        // (That means only elements with "drag-handle" can be used to move.)

        // 2) We remove dragCancel since we only drag with the handle
        dragAxis="y"
        bounds="parent"
        grid={[0, 10]}
        size={{ width: size.width, height: size.height }}
        position={{ x: position.x, y: position.y }}

        onDrag={handleDrag}
        onDragStop={handleDragStop}
        onResize={handleResize}
        onResizeStop={handleResizeStop}
        enableResizing={{
          top: false,
          right: false,
          bottom: true,
          left: false,
        }}
        style={{
          backgroundColor: bgColor,
          border,
          borderRadius: "4px",
          // We'll leave cursor normal here, 
          // so the handle is the only "move" cursor
          overflow: "hidden",
          padding: 0,
          boxSizing: "border-box",
          position: "relative",
        }}
      >
        {/* 
          DRAG HANDLE: Only this region can be used to move the block.
          Everything else => normal clicks won't cause a drag.
        */}
        <div
          className="drag-handle"
          style={{
            width: "100%",
            height: "calc(100% - 20px)", 
            // This leaves 20px at the top for "X" & "Edit" so they aren't draggable
            backgroundColor: "transparent",
            cursor: "move",
            display: "flex",
            alignItems: "center",
            justifyContent: "center",
          }}
        >
          <strong>{blockLabel}</strong>
        </div>

        {/* "X" => top-right => non-draggable, so no "drag-handle" class */}
        <div
          style={{
            position: "absolute",
            top: 2,
            right: 2,
            cursor: "pointer",
            fontWeight: "bold",
            color: "red",
          }}
          onClick={(e) => {
            e.stopPropagation();
            handleDelete(e);
          }}
        >
          X
        </div>

        {/* "Edit" => also in top bar => no "drag-handle" => not draggable */}
        <div
          style={{
            position: "absolute",
            top: 2,
            right: 22,
            cursor: "pointer",
            fontWeight: "bold",
            color: "cyan",
          }}
          onClick={(e) => {
            e.stopPropagation();
            if (typeof onEdit === "function") onEdit(block);
          }}
        >
          Edit
        </div>
      </Rnd>

      {/* HoverTime overlay */}
      {hoverTime && (
        <div
          style={{
            position: "absolute",
            left: position.x + 310,
            top: position.y,
            background: "#222",
            color: "#fff",
            padding: "4px 6px",
            borderRadius: "4px",
            fontSize: "0.8rem",
            pointerEvents: "none",
          }}
        >
          {hoverTime}
        </div>
      )}
    </>
  );
}

export default TimeBlock;

--- End of E:\Springboard Projects\Capstone\springboardcapstone\personal-agent-front\src\Schedule\TimeBlock.jsx ---

--- Start of E:\Springboard Projects\Capstone\springboardcapstone\personal-agent-front\src\UserContext.jsx ---
// src/UserContext.jsx
import React, { createContext, useState, useContext } from "react";

const UserContext = createContext();

export function UserProvider({ children }) {
  // Initialize user as null until a session check or login occurs.
  const [user, setUser] = useState(null);

  return (
    <UserContext.Provider value={{ user, setUser }}>
      {children}
    </UserContext.Provider>
  );
}

export function useUser() {
  return useContext(UserContext);
}

--- End of E:\Springboard Projects\Capstone\springboardcapstone\personal-agent-front\src\UserContext.jsx ---

--- Start of E:\Springboard Projects\Capstone\springboardcapstone\personal-agent-front\vite.config.js ---
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vite.dev/config/
export default defineConfig({
  plugins: [react()],
})

--- End of E:\Springboard Projects\Capstone\springboardcapstone\personal-agent-front\vite.config.js ---

