{"version":3,"file":"index.browser.js","sources":["../src/events.ts","../src/jitter-buffer.ts","../src/client.ts","../src/personas.ts","../models/add-transcript.ts","../models/recognition-result.ts","../models/recognition-display.ts"],"sourcesContent":["//////////////////////////////////////////////\n// Incoming messages: server -> client\n//////////////////////////////////////////////\nimport type { RecognitionResult, RecognitionMetadata } from '../models';\n\nexport type ConversationStartedMessage = {\n  message: 'ConversationStarted';\n  id: string;\n  asr_session_id: string;\n  language_pack_info: {\n    adapted: boolean;\n    itn: boolean;\n    language_description: string;\n    word_delimiter: string;\n    writing_direction: 'left-to-right' | 'right-to-left';\n  };\n};\n\nexport type AudioAddedMessage = {\n  message: 'AudioAdded';\n  seq_no: number;\n};\n\nexport type ResponseStartedMessage = {\n  message: 'ResponseStarted';\n  content: string;\n  start_time: number;\n};\n\nexport type ResponseCompletedMessage = {\n  message: 'ResponseCompleted';\n  content: string;\n  start_time: number;\n  end_time: number;\n};\n\nexport type AddTranscriptMessage = {\n  message: 'AddTranscript';\n  results: Array<RecognitionResult>;\n  metadata: RecognitionMetadata;\n};\n\nexport interface AddPartialTranscriptMessage {\n  message: 'AddPartialTranscript';\n  format?: string;\n  metadata: RecognitionMetadata;\n  results: Array<RecognitionResult>;\n}\n\nexport type ResponseInterruptedMessage = {\n  message: 'ResponseInterrupted';\n  content: string;\n  start_time: number;\n  end_time: number;\n};\n\nexport type ConversationEndingMessage = {\n  message: 'ConversationEnding';\n};\n\nexport type ConversationEndedMessage = {\n  message: 'ConversationEnded';\n};\n\nexport type InfoMessage = {\n  message: 'Info';\n  [k: string]: unknown;\n};\n\nexport type WarningMessage = {\n  message: 'Warning';\n  [k: string]: unknown;\n};\n\nexport type ErrorMessage = {\n  message: 'Error';\n  [k: string]: unknown;\n};\n\nexport type FlowClientIncomingMessage =\n  | ConversationStartedMessage\n  | AudioAddedMessage\n  | ResponseStartedMessage\n  | ResponseCompletedMessage\n  | ResponseInterruptedMessage\n  | AddTranscriptMessage\n  | AddPartialTranscriptMessage\n  | ConversationEndingMessage\n  | ConversationEndedMessage\n  | InfoMessage\n  | WarningMessage\n  | ErrorMessage;\n\n//////////////////////////////////////////////\n// Outgoing messages: client -> server\n//////////////////////////////////////////////\n\ntype AudioFormat = {\n  type: 'raw';\n  encoding: 'pcm_s16le' | 'pcm_f32le';\n  sample_rate: number;\n};\n\nexport interface StartConversationMessage {\n  message: 'StartConversation';\n  conversation_config: {\n    template_id: string;\n    template_variables: { [key: string]: string };\n  };\n  audio_format: AudioFormat;\n}\n\nexport interface AudioReceivedMessage {\n  message: 'AudioReceived';\n  seq_no: number;\n  buffering: number;\n}\n\nexport interface AudioEndedMessage {\n  message: 'AudioEnded';\n  last_seq_no: number;\n}\n\nexport type FlowClientOutgoingMessage =\n  | StartConversationMessage\n  | AudioReceivedMessage\n  | AudioEndedMessage;\n\n/////////////////////////////////////////////\n// Event Map\n/////////////////////////////////////////////\n\n// Custom event gets fired when we receive agent TTS audio\n// The underlying data is PCM16_SLE, represented as an Int16Array\nexport class AgentAudioEvent extends Event {\n  constructor(public readonly data: Int16Array) {\n    super('agentAudio');\n  }\n}\n\nexport class FlowIncomingMessageEvent extends Event {\n  constructor(public readonly data: FlowClientIncomingMessage) {\n    super('message');\n  }\n}\n\nexport interface FlowClientEventMap {\n  agentAudio: AgentAudioEvent;\n  message: FlowIncomingMessageEvent;\n\n  socketInitialized: Event;\n  socketOpen: Event;\n  socketClosing: Event;\n  socketClose: Event;\n  socketError: Event;\n}\n","import { TypedEventTarget } from 'typescript-event-target';\n\nconst FLUSH = 'flush';\n\nexport class FlushEvent extends Event {\n  constructor(readonly data: Int16Array[]) {\n    super(FLUSH);\n  }\n}\n\nexport class JitterBuffer extends TypedEventTarget<{ [FLUSH]: FlushEvent }> {\n  private buffer: Int16Array[] = [];\n\n  constructor(private readonly maxByteLength: number) {\n    super();\n  }\n\n  get byteLength() {\n    return this.buffer.reduce((sum, curr) => sum + curr.byteLength, 0);\n  }\n\n  enqueue(data: Int16Array) {\n    this.buffer.push(data);\n    if (this.byteLength >= this.maxByteLength) {\n      this.flush();\n    }\n  }\n\n  flush() {\n    this.dispatchTypedEvent(FLUSH, new FlushEvent(this.buffer));\n    this.buffer = [];\n  }\n}\n","import { TypedEventTarget } from 'typescript-event-target';\nimport {\n  AgentAudioEvent,\n  FlowIncomingMessageEvent,\n  type FlowClientEventMap,\n  type FlowClientIncomingMessage,\n  type FlowClientOutgoingMessage,\n  type StartConversationMessage,\n} from './events';\nimport { JitterBuffer } from './jitter-buffer';\n\nexport interface FlowClientOptions {\n  appId: string;\n  audioBufferingMs?: number;\n  // Sometimes it's useful to override the default Websocket binary type\n  // e.g. in React Native\n  websocketBinaryType?: WebSocket['binaryType'];\n}\n\nexport class FlowClient extends TypedEventTarget<FlowClientEventMap> {\n  public readonly appId: string;\n  private readonly audioBufferingMs: number;\n  private readonly websocketBinaryType: WebSocket['binaryType'];\n\n  constructor(\n    public readonly server: string,\n    {\n      appId,\n      audioBufferingMs = 10,\n      websocketBinaryType = 'blob',\n    }: FlowClientOptions,\n  ) {\n    super();\n    this.appId = appId;\n    this.audioBufferingMs = audioBufferingMs;\n    this.websocketBinaryType = websocketBinaryType;\n  }\n\n  // active websocket\n  private ws: WebSocket | null = null;\n\n  private serverSeqNo = 0; // tracks sequence of server sent audio\n  private clientSeqNo = 0; // tracks sequence of client sent audio\n\n  private jitterBuffer: JitterBuffer | null = null;\n\n  get socketState() {\n    if (!this.ws) return undefined;\n    return {\n      [WebSocket.CONNECTING]: 'connecting' as const,\n      [WebSocket.OPEN]: 'open' as const,\n      [WebSocket.CLOSING]: 'closing' as const,\n      [WebSocket.CLOSED]: 'closed' as const,\n    }[this.ws.readyState];\n  }\n\n  private async connect(jwt: string, timeoutMs = 10_000) {\n    const socketState = this.socketState;\n    if (socketState && socketState !== 'closed') {\n      throw new SpeechmaticsFlowError(\n        'SocketNotClosed',\n        `Cannot start connection while socket is ${socketState}`,\n      );\n    }\n\n    const waitForConnect = new Promise((resolve, reject) => {\n      const wsUrl = new URL('/v1/flow', this.server);\n      wsUrl.searchParams.append('jwt', jwt);\n      wsUrl.searchParams.append('sm-app', this.appId);\n\n      this.ws = new WebSocket(wsUrl.toString());\n      this.ws.binaryType = this.websocketBinaryType;\n\n      this.dispatchTypedEvent(\n        'socketInitialized',\n        new Event('socketInitialized'),\n      );\n\n      // Setup socket event listeners right away\n      this.setupSocketEventListeners();\n\n      this.addEventListener('socketOpen', resolve, { once: true });\n\n      this.addEventListener(\n        'socketError',\n        (e) => {\n          reject(\n            new SpeechmaticsFlowError(\n              'SocketError',\n              'Error opening websocket',\n              { cause: e },\n            ),\n          );\n        },\n        { once: true },\n      );\n    });\n\n    const { timeout, cancelTimeout } = rejectAfter(\n      timeoutMs,\n      'websocket connect',\n    );\n\n    await Promise.race([waitForConnect, timeout]);\n    cancelTimeout();\n  }\n\n  private setupSocketEventListeners() {\n    if (!this.ws)\n      throw new SpeechmaticsFlowError('SocketError', 'socket not initialized!');\n\n    this.ws.addEventListener('open', () => {\n      this.dispatchTypedEvent('socketOpen', new Event('socketOpen'));\n    });\n    this.ws.addEventListener('close', () =>\n      this.dispatchTypedEvent('socketClose', new Event('socketClose')),\n    );\n    this.ws.addEventListener('error', (e) =>\n      this.dispatchTypedEvent('socketError', new Event('socketError', e)),\n    );\n\n    this.ws.addEventListener('message', ({ data }) => {\n      // handle binary audio\n      if (data instanceof Blob || data instanceof ArrayBuffer) {\n        this.handleWebsocketAudio(data);\n      } else if (typeof data === 'string') {\n        this.handleWebsocketMessage(data);\n      } else {\n        throw new SpeechmaticsFlowError(\n          'UnexpectedMessage',\n          `Unexpected message type: ${data}`,\n        );\n      }\n    });\n  }\n\n  private handleWebsocketAudio(data: Blob | ArrayBuffer) {\n    // Acknowledge we've received the audio as soon as we've received it\n    this.sendWebsocketMessage({\n      message: 'AudioReceived',\n      seq_no: ++this.serverSeqNo,\n      buffering: this.audioBufferingMs / 1000,\n    });\n\n    if (data instanceof Blob && this.websocketBinaryType === 'blob') {\n      data\n        .arrayBuffer()\n        .then((b) => this.jitterBuffer?.enqueue(new Int16Array(b)))\n        .catch((e) => {\n          throw new SpeechmaticsFlowError(\n            'BadBinaryMessage',\n            'Failed to decode array buffer',\n            { cause: e },\n          );\n        });\n    } else if (\n      data instanceof ArrayBuffer &&\n      this.websocketBinaryType === 'arraybuffer'\n    ) {\n      this.jitterBuffer?.enqueue(new Int16Array(data));\n    } else {\n      throw new SpeechmaticsFlowError(\n        'BadBinaryMessage',\n        `Could not process audio: expecting audio to be ${this.websocketBinaryType} but got ${data.constructor.name}`,\n      );\n    }\n  }\n\n  private handleWebsocketMessage(message: string) {\n    // We're intentionally not validating the message shape. It is design by contract\n    let data: FlowClientIncomingMessage;\n    try {\n      data = JSON.parse(message);\n    } catch (e) {\n      throw new SpeechmaticsFlowError(\n        'UnexpectedMessage',\n        'Failed to parse message as JSON',\n        { cause: e },\n      );\n    }\n\n    if (data.message === 'AudioAdded') {\n      this.clientSeqNo = data.seq_no;\n    }\n\n    if (\n      data.message === 'ResponseCompleted' ||\n      data.message === 'ResponseInterrupted'\n    ) {\n      this.jitterBuffer?.flush();\n    }\n\n    this.dispatchTypedEvent('message', new FlowIncomingMessageEvent(data));\n  }\n\n  private sendWebsocketMessage(message: FlowClientOutgoingMessage) {\n    if (this.socketState === 'open') {\n      this.ws?.send(JSON.stringify(message));\n    }\n  }\n\n  public sendAudio(pcmData: ArrayBufferLike) {\n    if (this.socketState !== 'open') return;\n    this.ws?.send(pcmData);\n  }\n\n  async startConversation(\n    jwt: string,\n    {\n      config,\n      audioFormat,\n    }: {\n      config: StartConversationMessage['conversation_config'];\n      audioFormat?: StartConversationMessage['audio_format'];\n    },\n  ) {\n    await this.connect(jwt);\n\n    const conversation_config = {\n      ...config,\n      template_variables: {\n        timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,\n        ...config.template_variables,\n      },\n    };\n\n    const startMessage: StartConversationMessage = {\n      message: 'StartConversation',\n      conversation_config,\n      audio_format: audioFormat ?? DEFAULT_AUDIO_FORMAT,\n    };\n\n    const waitForConversationStarted = new Promise<void>((resolve, reject) => {\n      const client = this;\n      this.addEventListener('message', function onStart({ data }) {\n        if (data.message === 'ConversationStarted') {\n          resolve();\n          client.removeEventListener('message', onStart);\n        } else if (data.message === 'Error') {\n          reject(\n            new SpeechmaticsFlowError(\n              'ServerError',\n              'Error waiting for conversation start',\n              {\n                cause: data,\n              },\n            ),\n          );\n        }\n      });\n\n      this.sendWebsocketMessage(startMessage);\n    });\n\n    // If the socket closes before the conversation starts, reject rather than waiting\n    const rejectOnSocketClose = new Promise<void>((_, reject) => {\n      this.addEventListener(\n        'socketClose',\n        () =>\n          reject(\n            new SpeechmaticsFlowError(\n              'SocketClosedPrematurely',\n              'Socket closed before conversation started',\n            ),\n          ),\n        { once: true },\n      );\n    });\n\n    const { timeout, cancelTimeout } = rejectAfter(\n      10_000,\n      'conversation start',\n    );\n\n    this.jitterBuffer = new JitterBuffer(\n      TTS_BYTES_PER_MS * this.audioBufferingMs,\n    );\n\n    this.jitterBuffer.addEventListener('flush', ({ data }) => {\n      for (const buffer of data) {\n        this.dispatchTypedEvent('agentAudio', new AgentAudioEvent(buffer));\n      }\n    });\n\n    try {\n      await Promise.race([\n        waitForConversationStarted,\n        rejectOnSocketClose,\n        timeout,\n      ]);\n    } finally {\n      cancelTimeout();\n    }\n  }\n\n  endConversation() {\n    this.sendWebsocketMessage({\n      message: 'AudioEnded',\n      last_seq_no: this.clientSeqNo,\n    });\n    this.disconnectSocket();\n  }\n\n  private disconnectSocket() {\n    this.dispatchTypedEvent('socketClosing', new Event('socketClosing'));\n    this.ws?.close();\n  }\n}\n\nfunction rejectAfter(\n  timeoutMs: number,\n  key: string,\n): { cancelTimeout: () => void; timeout: Promise<void> } {\n  let timeoutId: ReturnType<typeof setTimeout> | undefined = undefined;\n  let resolve: (() => void) | undefined = undefined;\n\n  const timeout = new Promise<void>((_resolve, reject) => {\n    resolve = _resolve;\n\n    timeoutId = setTimeout(\n      () =>\n        reject(\n          new SpeechmaticsFlowError(\n            'Timeout',\n            `Timed out after ${timeoutMs}ms waiting for ${key}`,\n          ),\n        ),\n      timeoutMs,\n    );\n  });\n\n  const cancel = () => {\n    if (typeof timeoutId !== 'undefined') {\n      clearTimeout(timeoutId);\n    }\n    resolve?.();\n  };\n\n  return { timeout, cancelTimeout: cancel };\n}\n\nexport type SpeechmaticsFlowErrorType =\n  | 'SocketNotClosed'\n  | 'SocketClosedPrematurely'\n  | 'SocketError'\n  | 'ServerError'\n  | 'UnexpectedMessage'\n  | 'BadBinaryMessage'\n  | 'Timeout';\n\nexport class SpeechmaticsFlowError extends Error {\n  constructor(\n    readonly type: SpeechmaticsFlowErrorType,\n    message: string,\n    options?: ErrorOptions,\n  ) {\n    super(message, options);\n    this.name = 'SpeechmaticsFlowError';\n  }\n}\n\nconst DEFAULT_AUDIO_FORMAT = {\n  type: 'raw',\n  encoding: 'pcm_s16le',\n  sample_rate: 16000,\n} as const;\n\n// TTS from the server uses fixed sample rate of 16_000 samples/sec\n// The encoding is always pcm16sle (2 bytes per sample)\nconst TTS_SAMPLE_RATE = 16_000;\nconst TTS_BYTES_PER_SAMPLE = 2;\nconst TTS_BYTES_PER_MS = (TTS_SAMPLE_RATE * TTS_BYTES_PER_SAMPLE) / 1000;\n","interface Personas {\n  [personaId: string]: {\n    name: string;\n    character: string;\n    description: string;\n    start_text: string[];\n    avatar?: string;\n  };\n}\n\nexport async function fetchPersonas(): Promise<Personas> {\n  const resp = await fetch(\n    'https://flow.api.speechmatics.com/v1/discovery/templates',\n  );\n  const json = await resp.json();\n  return json.templates;\n}\n","// NOTE: This file is copied from realtime-client, not auto-generated\n\nimport type { RecognitionMetadata } from '../models';\nimport type { RecognitionResult } from '../models';\n\n/**\n *\n * @export\n * @interface AddTranscript\n */\nexport interface AddTranscript {\n  /**\n   *\n   * @type {string}\n   * @memberof AddTranscript\n   */\n  message: AddTranscriptMessageEnum;\n  /**\n   * Speechmatics JSON output format version number.\n   * @type {string}\n   * @memberof AddTranscript\n   */\n  format?: string;\n  /**\n   *\n   * @type {RecognitionMetadata}\n   * @memberof AddTranscript\n   */\n  metadata: RecognitionMetadata;\n  /**\n   *\n   * @type {Array<RecognitionResult>}\n   * @memberof AddTranscript\n   */\n  results: Array<RecognitionResult>;\n}\n\nexport const AddTranscriptMessageEnum = {\n  AddTranscript: 'AddTranscript',\n} as const;\n\nexport type AddTranscriptMessageEnum =\n  (typeof AddTranscriptMessageEnum)[keyof typeof AddTranscriptMessageEnum];\n","// NOTE: This file is copied from realtime-client, not auto-generated\n\nimport type { RecognitionAlternative } from './recognition-alternative';\n\n/**\n *\n * @export\n * @interface RecognitionResult\n */\nexport interface RecognitionResult {\n  /**\n   *\n   * @type {string}\n   * @memberof RecognitionResult\n   */\n  type: RecognitionResultTypeEnum;\n  /**\n   *\n   * @type {number}\n   * @memberof RecognitionResult\n   */\n  start_time: number;\n  /**\n   *\n   * @type {number}\n   * @memberof RecognitionResult\n   */\n  end_time: number;\n  /**\n   *\n   * @type {string}\n   * @memberof RecognitionResult\n   */\n  channel?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RecognitionResult\n   */\n  attaches_to?: RecognitionResultAttachesToEnum;\n  /**\n   *\n   * @type {boolean}\n   * @memberof RecognitionResult\n   */\n  is_eos?: boolean;\n  /**\n   *\n   * @type {Array<RecognitionAlternative>}\n   * @memberof RecognitionResult\n   */\n  alternatives?: Array<RecognitionAlternative>;\n  /**\n   *\n   * @type {number}\n   * @memberof RecognitionResult\n   */\n  score?: number;\n  /**\n   *\n   * @type {number}\n   * @memberof RecognitionResult\n   */\n  volume?: number;\n}\n\nexport const RecognitionResultTypeEnum = {\n  Word: 'word',\n  Punctuation: 'punctuation',\n} as const;\n\nexport type RecognitionResultTypeEnum =\n  (typeof RecognitionResultTypeEnum)[keyof typeof RecognitionResultTypeEnum];\nexport const RecognitionResultAttachesToEnum = {\n  Next: 'next',\n  Previous: 'previous',\n  None: 'none',\n  Both: 'both',\n} as const;\n\nexport type RecognitionResultAttachesToEnum =\n  (typeof RecognitionResultAttachesToEnum)[keyof typeof RecognitionResultAttachesToEnum];\n","// NOTE: This file is copied from realtime-client, not auto-generated\n\n/**\n *\n * @export\n * @interface RecognitionDisplay\n */\nexport interface RecognitionDisplay {\n  /**\n   *\n   * @type {string}\n   * @memberof RecognitionDisplay\n   */\n  direction: RecognitionDisplayDirectionEnum;\n}\n\nexport const RecognitionDisplayDirectionEnum = {\n  Ltr: 'ltr',\n  Rtl: 'rtl',\n} as const;\n\nexport type RecognitionDisplayDirectionEnum =\n  (typeof RecognitionDisplayDirectionEnum)[keyof typeof RecognitionDisplayDirectionEnum];\n"],"names":["__publicField"],"mappings":"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"}